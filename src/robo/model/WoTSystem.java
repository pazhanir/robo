package robo.model;

import java.util.HashMap;
import java.util.Map;

import robo.model.actuator.RelayActuator;
import robo.model.event.Event;
import robo.model.event.actuator.DisableRelayEvent;
import robo.model.event.actuator.EnableRelayEvent;

/**
 * Define a Web of Things System. Such a system represents a set of components
 * that are connected together to form a system. A system can be for example a
 * home (sensors) monitoring system, a home security system, a robot or any
 * other project that one can have in mind. The system must have a unique name
 * among the systems that runs for the same account (user). This allows to have
 * distributed systems that are combined together by the meaning of a server
 * system.
 * 
 * @author Mircea Diaconescu
 * @date Apr 8, 2014, 10:48:46 PM
 * 
 */
public abstract class WoTSystem extends PhysicalAgent {
  private Map< String, WoTComponent> components;

  public WoTSystem(String name) {
    this.components = new HashMap< String, WoTComponent>(1);
    this.setName(name);
  }

  /**
   * Return a component by knowing its name.
   * 
   * @param name
   *          the name of the component
   * @return the component with the given name, null in case that no component
   *         was found for the given name
   */
  @SuppressWarnings("unchecked")
  public < T extends WoTComponent> T getComponentByName(String name) {
    return (T) this.components.get(name);
  }

  /**
   * Add a component to the system. This will automatically register this
   * components parent as listener for all events of the added component.
   * 
   * @param component
   *          the component to be added to the system
   */
  public void addComponent(WoTComponent component) {
    this.addComponent(component, true);
  }

  /**
   * Add a component to the system. This method offers the possibility to allow
   * or disallow the auto-registering of this components parent as listener for
   * all events of the added component.
   * 
   * @param component
   *          the component to be added to the system
   * @param autoListenerRegistration
   *          if true, this components parent will be registered automatically
   *          to all events generated by this component, while if
   *          <code>false</code> no auto-registration is made for events so this
   *          must be done manually
   */
  public void addComponent(WoTComponent component,
      boolean autoListenerRegistration) {
    if (component != null) {
      this.components.put(component.getName(), component);
      if (autoListenerRegistration) {
        component.addListener(this);
        if (component instanceof RelayActuator) {
          this.addListenerForEventType(EnableRelayEvent.class, component);
          this.addListenerForEventType(DisableRelayEvent.class, component);
        }
      }
    }
  }

  @Override
  public void on(Event< ?> event) {
    super.on(event);
    // all event listeners of this robot are informed about events that the
    // robot obtain from its event sources (mostly robot components).
    this.trigger(event);
  }

  @Override
  public void onStarted() {
    // start all components of the system
    for (String key : this.components.keySet()) {
      WoTComponent component = this.components.get(key);
      if (component != null) {
        component.start();
      }
    }
  }

  @Override
  public void onStopped() {
    // stop all subcomponents
    for (String key : this.components.keySet()) {
      WoTComponent component = this.components.get(key);
      if (component != null) {
        component.stop();
      }
    }
  }
}
